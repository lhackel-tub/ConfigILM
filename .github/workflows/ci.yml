# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: ConfigILM Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  test:
    name: Run tests & display coverage
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.0
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev,extra
      #----------------------------------------------
      #  Run test suite + coverage + generate badge
      #----------------------------------------------
      - name: Run tests + generate coverage
        run: |
          poetry run coverage run --source=configilm -m pytest
      - name: Log latest CI run
        run: echo $(date) > latest_ci_run
      - name: Generate coverage report
        run: |
          source .venv/bin/activate
          coverage report
      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-py@v2

      #----------------------------------------------
      #  Build Docu
      #----------------------------------------------
      - name: Build documentation
        run: poetry run sphinx-build docs docs/_build

      - name: Deploy Pages
        if: ${{ github.event_name == 'push' }}
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages # The branch the action should deploy to.
          # This should be set via `just build`
          folder: docs/_build
          # do not touch the pr-preview generated files:
          # https://github.com/rossjrw/pr-preview-action
          clean-exclude: pr-preview/

      #----------------------------------------------
      #  Add Coverage Badge
      #----------------------------------------------
      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v13
        id: verify-changed-files
        with:
          files: coverage.svg

      - name: Commit files
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add coverage.svg
          git commit -m "Updated coverage.svg"

      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.github_token }}
          branch: ${{ github.ref }}
