{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# {{ben}}\n",
    "This page describes the usage of Dataloader and Datamodule for {{ben}}, a multi-spectral multilabel Remote Sensing Land-Use/Land-Cover classification dataset.\n",
    "\n",
    "The official paper of the {{ben}} (BigEarthNet-S2) dataset was initially published in {cite:t}`BEN` and updated to multi-modal {{ben}} in {cite:t}`BEN19labels`.\n",
    "\n",
    "For detailed information on the dataset itself please refer to the publications and the {{bendocs}}."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.191109Z",
     "start_time": "2023-04-12T17:05:43.155336Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/leonard/.cache/pypoetry/virtualenvs/configilm-l7TjLRMG-py3.10/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "# remove-input\n",
    "# remove-output\n",
    "import matplotlib.pyplot as plt\n",
    "import pathlib\n",
    "from pprint import pprint\n",
    "import torch\n",
    "from configilm.extra import data_dir\n",
    "\n",
    "my_data_path = data_dir.mock_data_path[\"benv1\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset is divided into two modules which contains two `classes`, a standard `torch.util.data.Dataset` and a `pytorch_lightning.LightningDataModule` that encapsulates the `Dataset` for easy use in `pytorch_lightning` applications. The `Dataset` uses a `BENLMDBReader` to read images and labels from a LMDB file. Labels are returned in their 19-label version as one-hot vector."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BENDataSet\n",
    "\n",
    "In its most basic form, the `Dataset` only needs the base path of the LMDB file and csv files, if the path is not \"./\". The LMDB file name is assumed to be `BigEarthNetEncoded.lmdb` (note, that from an os point of view, LMDB files are folders). This `Dataset` will load 12 channels (10m + 20m Sentinel-2 + 10m Sentinel-1).\n",
    "\n",
    "The full folder structure expected is\n",
    "```\n",
    ".\n",
    "├── BigEarthNetEncoded.lmdb\n",
    "│   ├── data.mdb\n",
    "│   └── lock.mdb\n",
    "├── test.csv\n",
    "├── train.csv\n",
    "└── val.csv\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.193283Z",
     "start_time": "2023-04-12T17:05:43.171086Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading BEN data for None...\n",
      "    30 patches indexed\n",
      "    30 pre-filtered patches indexed\n",
      "    30 filtered patches indexed\n"
     ]
    }
   ],
   "source": [
    "from configilm.extra.DataSets import BEN_DataSet\n",
    "from configilm.extra.DataModules import BEN_DataModule\n",
    "\n",
    "ds = BEN_DataSet.BENDataSet(\n",
    "    data_dirs=my_data_path  # path set by to dataset\n",
    ")\n",
    "\n",
    "img, lbl = ds[26]\n",
    "img = torch.flip(img[:3], [0]) # only choose BGR axis for display and bring into RGB order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.220061Z",
     "start_time": "2023-04-12T17:05:43.171196Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size: torch.Size([3, 120, 120])\n",
      "Labels:\n",
      "tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "        1.])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# remove-input\n",
    "print(f\"Size: {img.shape}\")\n",
    "print(\"Labels:\")\n",
    "pprint(lbl)\n",
    "# images are 12 bit of radiometric resolution, so to display simply divide by 2^12\n",
    "# this will not be the best way of displaying but enough as a showcase\n",
    "img /= 2**12\n",
    "\n",
    "_ = plt.imshow(img.permute(1, 2, 0))\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Selecting Bands\n",
    "\n",
    "The `Dataset` also supports different channel configurations, however, setting the selected channels is only supported via image size selection and only limited combinations are available. To see the available combinations call `BEN_DataModule_LMDB_Encoder.BENDataSet.get_available_channel_configurations()`. Alternatively, a faulty configuration will display the possibilities as well whilst raising an `AssertionError`.\n",
    "\n",
    "The configurations are working like setting the respective number as `bands` parameter in the `LMDBReader`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.267315Z",
     "start_time": "2023-04-12T17:05:43.251138Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available channel configurations are:\n",
      "      2 -> Sentinel-1\n",
      "      3 -> RGB\n",
      "      4 -> 10m Sentinel-2\n",
      "     10 -> 10m + 20m Sentinel-2\n",
      "     12 -> 10m + 20m Sentinel-2 + 10m Sentinel-1\n"
     ]
    }
   ],
   "source": [
    "BEN_DataSet.BENDataSet.get_available_channel_configurations()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splits\n",
    "\n",
    "It is possible to load only a specific split (`'train'`, `'val'` or `'test'`) in the dataset. The images loaded are specified using the csv files in the same folder as the LMDB file. By default (`None`), all three are loaded into the same `Dataset`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.267537Z",
     "start_time": "2023-04-12T17:05:43.251246Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading BEN data for train...\n",
      "    10 patches indexed\n",
      "    10 pre-filtered patches indexed\n",
      "    10 filtered patches indexed\n"
     ]
    }
   ],
   "source": [
    "_ = BEN_DataSet.BENDataSet(\n",
    "    data_dirs=my_data_path,  # path set by to dataset\n",
    "    split=\"train\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Restricting the number of loaded images\n",
    "\n",
    "It is also possible to restrict the number of images indexed. By setting `max_img_idx = n` only the first `n` images (in alphabetical order based on their S2-name) will be loaded. A `max_img_idx` of  `None`, `-1` or larger than the number of images in the csv file(s) (in this case 25) equals to load-all-images behaviour."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.267634Z",
     "start_time": "2023-04-12T17:05:43.251331Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading BEN data for train...\n",
      "    10 patches indexed\n",
      "    10 pre-filtered patches indexed\n",
      "    10 filtered patches indexed\n"
     ]
    }
   ],
   "source": [
    "_ = BEN_DataSet.BENDataSet(\n",
    "    data_dirs=my_data_path,  # path set by to dataset\n",
    "    split=\"train\",\n",
    "    max_len=10\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.267719Z",
     "start_time": "2023-04-12T17:05:43.251428Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading BEN data for train...\n",
      "    10 patches indexed\n",
      "    10 pre-filtered patches indexed\n",
      "    10 filtered patches indexed\n"
     ]
    }
   ],
   "source": [
    "_ = BEN_DataSet.BENDataSet(\n",
    "    data_dirs=my_data_path,  # path set by to dataset\n",
    "    split=\"train\",\n",
    "    max_len=100\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BENDataModule\n",
    "\n",
    "This class is a [Lightning Data Module](https://pytorch-lightning.readthedocs.io/en/stable/data/datamodule.html), that wraps the `BENDataSet`. It automatically generates `DataLoader` per split with augmentations, shuffling, etc., depending on the split. All images are resized and normalized and images in the train set additionally basic-augmented via noise and flipping/rotation. The train split is also shuffled, however this can be overwritten (see below).\n",
    "\n",
    "To use a `DataModule`, the `setup()` function has to be called. This populates the `Dataset` splits inside the `DataModule`. Depending on the stage (`'fit'`, `'test'` or `None`), the setup will prepare only train & validation `Dataset`, only test `Dataset` or all three."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.267810Z",
     "start_time": "2023-04-12T17:05:43.251515Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before:\n",
      "None\n",
      "None\n",
      "None\n",
      "\n",
      "=== SETUP ===\n",
      "Loading BEN data for train...\n",
      "    10 patches indexed\n",
      "    10 pre-filtered patches indexed\n",
      "    10 filtered patches indexed\n",
      "Loading BEN data for val...\n",
      "    10 patches indexed\n",
      "    10 pre-filtered patches indexed\n",
      "    10 filtered patches indexed\n",
      "  Total training samples:       10  Total validation samples:       10\n",
      "=== END SETUP ===\n",
      "\n",
      "After:\n",
      "<configilm.extra.DataSets.BEN_DataSet.BENDataSet object at 0x7ff71db207c0>\n",
      "<configilm.extra.DataSets.BEN_DataSet.BENDataSet object at 0x7ff71d913010>\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "dm = BEN_DataModule.BENDataModule(\n",
    "    data_dirs=my_data_path  # path set by to dataset\n",
    ")\n",
    "print(\"Before:\")\n",
    "print(dm.train_ds)\n",
    "print(dm.val_ds)\n",
    "print(dm.test_ds)\n",
    "\n",
    "print(\"\\n=== SETUP ===\")\n",
    "dm.setup(stage=\"fit\")\n",
    "print(\"=== END SETUP ===\\n\")\n",
    "print(\"After:\")\n",
    "print(dm.train_ds)\n",
    "print(dm.val_ds)\n",
    "print(dm.test_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Afterwards the pytorch `DataLoader` can be easily accessed. Note, that $len(DL) = \\lceil \\frac{len(DS)}{batch\\_size} \\rceil$, therefore here with the default `batch_size` of 16: 25/16 -> 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.267891Z",
     "start_time": "2023-04-12T17:05:43.251713Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "train_loader = dm.train_dataloader()\n",
    "print(len(train_loader))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `DataModule` has in addition to the `DataLoader` settings a parameter each for `data_dir`, `image_size` and `max_img_idx` which are passed through to the `DataSet`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DataLoader settings\n",
    "\n",
    "The `DataLoader` have three settable parameters: `batch_size`, `num_workers_dataloader` and `shuffle` with 16, `os.cpu_count()` / 2 and `None` as their default values. A shuffle of `None` means, that the train set is shuffled but validation and test are not. Changing this setting will be accompanied by a Message-Hint printed.\n",
    "\n",
    "Not changeable is the usage of pinned memory, which is set to `True` if a cuda-enabled device is found and `False` otherwise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.267974Z",
     "start_time": "2023-04-12T17:05:43.251796Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== SETUP ===\n",
      "Loading BEN data for train...\n",
      "    10 patches indexed\n",
      "    10 pre-filtered patches indexed\n",
      "    10 filtered patches indexed\n",
      "Loading BEN data for val...\n",
      "    10 patches indexed\n",
      "    10 pre-filtered patches indexed\n",
      "    10 filtered patches indexed\n",
      "  Total training samples:       10  Total validation samples:       10\n",
      "=== END SETUP ===\n",
      "\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "dm = BEN_DataModule.BENDataModule(\n",
    "    data_dirs=my_data_path,  # path set by to dataset\n",
    "    batch_size=4\n",
    ")\n",
    "print(\"\\n=== SETUP ===\")\n",
    "dm.setup(stage=\"fit\")\n",
    "print(\"=== END SETUP ===\\n\")\n",
    "print(len(dm.train_dataloader()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.268053Z",
     "start_time": "2023-04-12T17:05:43.251881Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/leonard/Documents/development/ConfigILM/configilm/extra/DataModules/BEN_DataModule.py:109: UserWarning: Shuffle was set to False. This is not recommended for most configuration. Use shuffle=None (default) for recommended configuration.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "_ = BEN_DataModule.BENDataModule(\n",
    "    data_dirs=my_data_path,  # path set by to dataset\n",
    "    shuffle=False\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-04-12T17:05:43.268349Z",
     "start_time": "2023-04-12T17:05:43.251968Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "_ = BEN_DataModule.BENDataModule(\n",
    "    data_dirs=my_data_path,  # path set by to dataset\n",
    "    num_workers_dataloader=2\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
