{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Visual Question Answering (VQA)\n",
    "The Framework is set up in way, that it is easy to combine an image model from the [timm](https://github.com/huggingface/pytorch-image-models/tree/main/timm/models) library with a language model from [huggingface](https://huggingface.co/). For both models, either pre-trained weights can be used or the models can be trained as a composite in an end-to-end fashion.\n",
    "For this example usage we will be using the `RSVQAxBEN DataModule` which loads the *RSVQAxBEN* dataset published by {cite:t}`rsvqaxben` inside a [Pytorch Lightning](https://pytorch-lightning.readthedocs.io/en/stable/) trainer. The network will be integrated into a [`LightningModule`](https://pytorch-lightning.readthedocs.io/en/stable/common/lightning_module.html)."
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "First we start by importing the needed packages from `torch` and Pytorch Lightning so that we can set up the `LightningModule`."
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/leonard/.cache/pypoetry/virtualenvs/configilm-l7TjLRMG-py3.10/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "# remove-output\n",
    "# import packages\n",
    "try:\n",
    "    import lightning.pytorch as pl\n",
    "except ImportError:\n",
    "    import pytorch_lightning as pl\n",
    "import torch\n",
    "import torch.nn.functional as F\n",
    "from torch import optim\n",
    "\n",
    "from configilm import ConfigILM"
   ],
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.347284747Z",
     "start_time": "2023-07-05T08:46:20.316652241Z"
    },
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "execution_count": 1
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Pytorch Lightning Module\n",
    "The `Module` we use to encapsulate the model divides the usual loop into functions that are called internally by Pytorch Lightning. The necessary functions are just\n",
    "1. `training_step` and\n",
    "2. `configure_optimizer`,\n",
    "\n",
    "but to have a fully functional script, we add the validation and test steps as well as evaluation of the validation and test results. All `*_step` functions are working on a single batch while `*_epoch_end` functions are called after all batches are evaluated. During `*_step` calls the module collects the outputs in the respective `self.*_output_list` so that the results can be evaluated at the end of the epoch (this is new for Pytorch Lightning 2.0).\n",
    "For Visual Question Answering (VQA) we have to add one additional function, as the network works with 3 values (image + language input, output) instead of the usual 2 (input, output). Therefore we add a function (here called `_disassemble_batch`), which disassembles the batch into input and output where the _input contains both modalities_."
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "class LitVQAEncoder(pl.LightningModule):\n",
    "    \"\"\"\n",
    "    Wrapper around a pytorch module, allowing this module to be used in automatic\n",
    "    training with Pytorch Lightning.\n",
    "    Among other things, the wrapper allows us to do automatic training and removes the\n",
    "    need to manage data on different devices (e.g. GPU and CPU).\n",
    "    \"\"\"\n",
    "    def __init__(\n",
    "        self,\n",
    "        config: ConfigILM.ILMConfiguration,\n",
    "        lr: float = 1e-3,\n",
    "    ):\n",
    "        super().__init__()\n",
    "        self.lr = lr\n",
    "        self.config = config\n",
    "        self.model = ConfigILM.ConfigILM(config)\n",
    "        self.val_output_list = []\n",
    "        self.test_output_list = []\n",
    "\n",
    "    def _disassemble_batch(self, batch):\n",
    "        images, questions, labels = batch\n",
    "        # transposing tensor, needed for Huggingface-Dataloader combination\n",
    "        questions = torch.tensor(\n",
    "            [x.tolist() for x in questions], device=self.device\n",
    "        ).T.int()\n",
    "        return (images, questions), labels\n",
    "\n",
    "    def training_step(self, batch, batch_idx):\n",
    "        x, y = self._disassemble_batch(batch)\n",
    "        x_hat = self.model(x)\n",
    "        loss = F.binary_cross_entropy_with_logits(x_hat, y)\n",
    "        self.log(\"train/loss\", loss)\n",
    "        return {\"loss\": loss}\n",
    "\n",
    "    def configure_optimizers(self):\n",
    "        optimizer = optim.AdamW(self.parameters(), lr=self.lr, weight_decay=0.01)\n",
    "        return optimizer\n",
    "\n",
    "    # ============== NON-MANDATORY-FUNCTION ===============\n",
    "\n",
    "    def validation_step(self, batch, batch_idx):\n",
    "        x, y = self._disassemble_batch(batch)\n",
    "        x_hat = self.model(x)\n",
    "        loss = F.binary_cross_entropy_with_logits(x_hat, y)\n",
    "        self.val_output_list += [{\"loss\": loss, \"outputs\": x_hat, \"labels\": y}]\n",
    "\n",
    "    def on_validation_epoch_start(self):\n",
    "        super().on_validation_epoch_start()\n",
    "        self.val_output_list = []\n",
    "\n",
    "    def on_validation_epoch_end(self):\n",
    "        avg_loss = torch.stack([x[\"loss\"] for x in self.val_output_list]).mean()\n",
    "        self.log(\"val/loss\", avg_loss)\n",
    "\n",
    "    def test_step(self, batch, batch_idx):\n",
    "        x, y = self._disassemble_batch(batch)\n",
    "        x_hat = self.model(x)\n",
    "        loss = F.binary_cross_entropy_with_logits(x_hat, y)\n",
    "        self.test_output_list += [{\"loss\": loss, \"outputs\": x_hat, \"labels\": y}]\n",
    "\n",
    "    def on_test_epoch_start(self):\n",
    "        super().on_test_epoch_start()\n",
    "        self.test_output_list = []\n",
    "\n",
    "    def on_test_epoch_end(self):\n",
    "        avg_loss = torch.stack([x[\"loss\"] for x in self.test_output_list]).mean()\n",
    "        self.log(\"test/loss\", avg_loss)\n",
    "\n",
    "    def forward(self, batch):\n",
    "        # because we are a wrapper, we call the inner function manually\n",
    "        return self.model(batch)"
   ],
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.452059026Z",
     "start_time": "2023-07-05T08:46:20.324762751Z"
    },
    "collapsed": false
   },
   "execution_count": 2
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Configuring\n",
    "Now that we have our model, we will use the Pytorch Lightning `Trainer` to run our loops. Results are logged to `tensorboard`.\n",
    "\n",
    "We start by importing some callbacks used during training"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "from configilm.ConfigILM import ILMConfiguration, ILMType"
   ],
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.461183676Z",
     "start_time": "2023-07-05T08:46:20.334507093Z"
    },
    "collapsed": false
   },
   "execution_count": 3
  },
  {
   "cell_type": "markdown",
   "source": [
    "as well as defining our hyperparameters."
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.462250845Z",
     "start_time": "2023-07-05T08:46:20.382151211Z"
    },
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "image_model_name = \"resnet18\"\n",
    "text_model_name = \"prajjwal1/bert-tiny\"\n",
    "seed = 42\n",
    "number_of_channels = 12\n",
    "image_size = 120\n",
    "epochs = 4\n",
    "lr = 5e-4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we create the configuration for usage in model creation later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.462599899Z",
     "start_time": "2023-07-05T08:46:20.382464445Z"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 42\n"
     ]
    }
   ],
   "source": [
    "# remove-output\n",
    "# seed for pytorch, numpy, python.random, Dataloader workers, spawned subprocesses\n",
    "pl.seed_everything(seed, workers=True)\n",
    "\n",
    "model_config = ILMConfiguration(\n",
    "    timm_model_name=image_model_name,\n",
    "    hf_model_name=text_model_name,  # different to pre-training\n",
    "    classes=1000,  # different to pre-training\n",
    "    image_size=image_size,\n",
    "    channels=number_of_channels,\n",
    "    network_type=ILMType.VQA_CLASSIFICATION  # different to pre-training\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We log the hyperparameters and create a Pytorch Lightning [Trainer](https://pytorch-lightning.readthedocs.io/en/stable/common/trainer.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.517723167Z",
     "start_time": "2023-07-05T08:46:20.382777274Z"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n",
      "HPU available: False, using: 0 HPUs\n"
     ]
    }
   ],
   "source": [
    "# remove-output\n",
    "trainer = pl.Trainer(\n",
    "    max_epochs=epochs,\n",
    "    accelerator=\"auto\",\n",
    "    log_every_n_steps=1,\n",
    "    logger=False,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating Model + Dataset\n",
    "Finally, we create the model defined above and our datamodule. We will be using a datamodule from this framework described in the Extra section.\n",
    "\n",
    "::: {note}\n",
    "We get a user warning here that 'image_size' is not known as a keyword. This is expected as most Convolutional Neural Networks (CNNs) (just as the resnet here) operate independently of the image size of the input\n",
    ":::"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.546186608Z",
     "start_time": "2023-07-05T08:46:20.485891865Z"
    },
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# remove-input\n",
    "# remove-output\n",
    "from configilm.extra import data_dir\n",
    "my_data_path = data_dir.mock_data_path[\"rsvqaxben\"]\n",
    "# set precision on Ampere cards to bfloat16\n",
    "torch.set_float32_matmul_precision('medium')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:46:20.744815817Z",
     "start_time": "2023-07-05T08:46:20.486138126Z"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/leonard/Documents/development/ConfigILM/configilm/ConfigILM.py:133: UserWarning: Keyword 'img_size' unknown. Trying to ignore and restart creation.\n",
      "  warnings.warn(f\"Keyword '{failed_kw}' unknown. Trying to ignore and restart creation.\")\n",
      "/home/leonard/Documents/development/ConfigILM/configilm/ConfigILM.py:107: UserWarning: Tokenizer was initialized pretrained\n",
      "  warnings.warn(\"Tokenizer was initialized pretrained\")\n"
     ]
    }
   ],
   "source": [
    "from configilm.extra.DataModules.RSVQAxBEN_DataModule import RSVQAxBENDataModule\n",
    "model = LitVQAEncoder(config=model_config, lr=lr)\n",
    "dm = RSVQAxBENDataModule(\n",
    "    data_dirs=my_data_path,  # path to dataset\n",
    "    img_size=(number_of_channels, image_size, image_size),\n",
    "    num_workers_dataloader=4,\n",
    "    tokenizer = model.model.get_tokenizer()\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running\n",
    "Now we just have to call the `fit()` and optionally the `test()` functions.\n",
    "\n",
    ":::{note}\n",
    "These calls generate quite a bit of output depending on the number of batches and epochs. The output is removed for readability.\n",
    ":::"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:48:42.614351674Z",
     "start_time": "2023-07-05T08:46:20.743015833Z"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/leonard/.cache/pypoetry/virtualenvs/configilm-l7TjLRMG-py3.10/lib/python3.10/site-packages/pytorch_lightning/callbacks/model_checkpoint.py:639: Checkpoint directory /home/leonard/Documents/development/ConfigILM/docs/checkpoints exists and is not empty.\n",
      "\n",
      "  | Name  | Type      | Params\n",
      "------------------------------------\n",
      "0 | model | ConfigILM | 16.6 M\n",
      "------------------------------------\n",
      "16.6 M    Trainable params\n",
      "0         Non-trainable params\n",
      "16.6 M    Total params\n",
      "66.281    Total estimated model params size (MB)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading split RSVQAxBEN data for train...\n",
      "          10 QA-pairs indexed\n",
      "          10 QA-pairs used\n",
      "Loading split RSVQAxBEN data for val...\n",
      "          10 QA-pairs indexed\n",
      "          10 QA-pairs used\n",
      "  Total training samples:       10  Total validation samples:       10\n",
      "Sanity Checking DataLoader 0:   0%|                                                                                                                                                   | 0/1 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "We strongly recommend passing in an `attention_mask` since your input_ids may be padded. See https://huggingface.co/docs/transformers/troubleshooting#incorrect-output-when-padding-tokens-arent-masked.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  2.39it/s]\n",
      "Validation: |                                                                                                                                                                         | 0/? [00:00<?, ?it/s]\u001B[A\n",
      "Validation:   0%|                                                                                                                                                                     | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0:   0%|                                                                                                                                                        | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 10.61it/s]\u001B[A\n",
      "Epoch 1: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  1.78it/s]\u001B[A\n",
      "Validation: |                                                                                                                                                                         | 0/? [00:00<?, ?it/s]\u001B[A\n",
      "Validation:   0%|                                                                                                                                                                     | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0:   0%|                                                                                                                                                        | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  7.81it/s]\u001B[A\n",
      "Epoch 2: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  1.57it/s]\u001B[A\n",
      "Validation: |                                                                                                                                                                         | 0/? [00:00<?, ?it/s]\u001B[A\n",
      "Validation:   0%|                                                                                                                                                                     | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0:   0%|                                                                                                                                                        | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  7.07it/s]\u001B[A\n",
      "Epoch 3: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  1.77it/s]\u001B[A\n",
      "Validation: |                                                                                                                                                                         | 0/? [00:00<?, ?it/s]\u001B[A\n",
      "Validation:   0%|                                                                                                                                                                     | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0:   0%|                                                                                                                                                        | 0/1 [00:00<?, ?it/s]\u001B[A\n",
      "Validation DataLoader 0: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 10.83it/s]\u001B[A\n",
      "Epoch 3: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  1.23it/s]\u001B[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=4` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:01<00:00,  0.93it/s]\n"
     ]
    }
   ],
   "source": [
    "# remove-output\n",
    "trainer.fit(model, datamodule=dm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:48:43.568410538Z",
     "start_time": "2023-07-05T08:48:42.605574569Z"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading split RSVQAxBEN data for test...\n",
      "          10 QA-pairs indexed\n",
      "          10 QA-pairs used\n",
      "  Total test samples:       10\n",
      "Testing DataLoader 0: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  6.41it/s]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\">        Test metric        </span>┃<span style=\"font-weight: bold\">       DataLoader 0        </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         test/loss         </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    0.6712900400161743     </span>│\n",
       "└───────────────────────────┴───────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001B[1m \u001B[0m\u001B[1m       Test metric       \u001B[0m\u001B[1m \u001B[0m┃\u001B[1m \u001B[0m\u001B[1m      DataLoader 0       \u001B[0m\u001B[1m \u001B[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001B[36m \u001B[0m\u001B[36m        test/loss        \u001B[0m\u001B[36m \u001B[0m│\u001B[35m \u001B[0m\u001B[35m   0.6712900400161743    \u001B[0m\u001B[35m \u001B[0m│\n",
       "└───────────────────────────┴───────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "[{'test/loss': 0.6712900400161743}]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# remove-output\n",
    "trainer.test(model, datamodule=dm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is an example forward call for the model. Since the input is normalized, the colors are slightly distorted. To display the image anyway, we select only the RGB channels and normalize this image to the range 0 to 1.\n",
    "The input question is already returned by the dataset in the form of tokens, so we decode here again using the tokenizer. To make the input always the same size it may be padded. For readability, one the first few tokens are shown here.\n",
    "Additionally only the first 10 elements of output + expected answer are shown, as the full lists have 1000 elements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-07-05T08:48:43.861560467Z",
     "start_time": "2023-07-05T08:48:43.576980951Z"
    },
    "collapsed": false,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Text: [CLS] are there some water bodies? [SEP] [PAD] [PAD] [PAD] ...\n",
      "Question: [101, 2024, 2045, 2070, 2300, 4230, 1029, 102, 0, 0, 0] ...\n",
      "Expected: [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n",
      "          no\n",
      "    Real: [0.005217293277382851, 0.09575556218624115, -0.2607608735561371, -0.06632936000823975, 0.2507065236568451, -0.10680564492940903, 0.005018912255764008, -0.07133620232343674, 0.042622726410627365, 0.1084778755903244]\n",
      "          no\n"
     ]
    }
   ],
   "source": [
    "# remove-input\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "v, q, a = dm.val_ds[9]\n",
    "# only choose BGR axis for display and bring into RGB order\n",
    "# only needed for displaying\n",
    "img_display = torch.flip(v[:3], [0])\n",
    "img_display -= torch.min(img_display)\n",
    "img_display /= torch.max(img_display)\n",
    "\n",
    "_ = plt.imshow(img_display.permute(1, 2, 0))\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "# add batch dimension\n",
    "v_in = v.unsqueeze(0)\n",
    "q_in = torch.tensor(q).unsqueeze(0)\n",
    "\n",
    "# forward call, only use first result (batch size 1)\n",
    "result = model((v_in, q_in))[0]\n",
    "\n",
    "print(f\"    Text: {dm.val_ds.tokenizer.decode(q)[:58]} ...\")\n",
    "print(f\"Question: {q[:11]} ...\")\n",
    "print(f\"Expected: {a.tolist()[:10]}\")\n",
    "print(f\"          {dm.selected_answers[a.argmax()]}\")\n",
    "print(f\"    Real: {result.tolist()[:10]}\")\n",
    "print(f\"          {dm.selected_answers[a.argmax()]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
